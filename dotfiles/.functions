#!/bin/bash

function path ()
{
    echo -e ${PATH//:/\\n}
}

function mkd ()
{
    mkdir -p "$@" && cd "$_";
}

# This script was automatically generated by the broot program
# More information can be found in https://github.com/Canop/broot
# This function starts broot and executes the command
# it produces, if any.
# It's needed because some shell commands, like `cd`,
# have no useful effect if executed in a subshell.
function br {
    local cmd cmd_file code
    cmd_file=$(mktemp)
    if broot --outcmd "$cmd_file" "$@"; then
        cmd=$(<"$cmd_file")
        command rm -f "$cmd_file"
        eval "$cmd"
    else
        code=$?
        command rm -f "$cmd_file"
        return "$code"
    fi
}

function calc {
    rofi -show calc -modi calc -no-show-match -no-sort -calc-command "echo -n '{result}' | xclip"
}

### Conversion functions
function bin2oct () { base2base  2  8 "$@" ; }
function bin2dec () { base2base  2 10 "$@" ; }
function bin2hex () { base2base  2 16 "$@" ; }
function oct2bin () { base2base  8  2 "$@" ; }
function oct2dec () { base2base  8 10 "$@" ; }
function oct2hex () { base2base  8 16 "$@" ; }
function dec2bin () { base2base 10  2 "$@" ; }
function dec2hex () { base2base 10 16 "$@" ; }
function dec2oct () { base2base 10  8 "$@" ; }
function hex2bin () { base2base 16  2 "$@" ; }
function hex2dec () { base2base 16 10 "$@" ; }
function hex2oct () { base2base 16  8 "$@" ; }
### Conversion functions
