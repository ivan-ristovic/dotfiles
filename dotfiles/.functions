#!/bin/bash

function fm ()
{
    if [ "$FILEMGR_CLI" = "ranger" ]; then 
        local IFS=$'\t\n'
        local tempfile
        tempfile="$(mktemp -t tmp.XXXXXX)"
        local ranger_cmd=(
            command
            ranger
            --cmd="map Q chain shell echo %d > $tempfile; quitall"
        )
        
        ${ranger_cmd[@]} "$@"
        if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$(echo -n "$(pwd)")" ]]; then
            cd -- "$(cat "$tempfile")" || return
        fi
        command rm -f -- "$tempfile" 2>/dev/null
    else
        "$FILEMGR_CLI" "$@"
    fi
}

function cf ()
{
    for f in "$@"; do
        echo -n "$f: "
        ls -1 "$f" | wc -l
    done
}

function isdir ()
{
    ___test_all -d "$@"
}

function isfile ()
{
    ___test_all -f "$@"
}

function ___test_all
{
    args="$1"
    shift 1
    for f in "$@"; do
        if ! test "$args" "$f"; then
            return 1
        fi
    done
}

function mkd ()
{
    mkdir -p "$@" && cd "$_"
}

function path ()
{
    echo -e "${PATH//:/\\n}"
}

function swturbo ()
{
    sudo cpumode -b
}

function trim ()
{
    sed 's/^ *//; s/ *$//; /^$/d' "${1:-/dev/stdin}" 
}

function until-code ()
{
    code=$1
    shift
    while true; do
        eval "$*"
        if [ $? -eq "$code" ]; then
            break
        fi
    done
}

function until-err ()
{
    while eval "$*" ; do
        true
    done
}

function until-suc ()
{
    until-code 0 "$@"
}

function loop ()
{
    while true; do
        eval "$*"
    done
}

function view-src ()
{
    if whence -v "$1"; then
        case $(whence -w "$1") in
            *": function")
                which "$1" | bat --file-name="function: $1"
                ;;
            *": builtin" | *": alias")
                ;;
            *)
                loc="$(which "$1")"
                if [ -f "$loc" ]; then
                    bat "$loc"
                fi
        esac
    fi
}

# This script was automatically generated by the broot program
# More information can be found in https://github.com/Canop/broot
# This function starts broot and executes the command it produces, if any.
# It's needed because some shell commands, like `cd`, have no useful effect if executed in a subshell.
function br {
    local cmd cmd_file code
    cmd_file=$(mktemp)
    if broot --outcmd "$cmd_file" "$@"; then
        cmd=$(<"$cmd_file")
        command rm -f "$cmd_file"
        eval "$cmd"
    else
        code=$?
        command rm -f "$cmd_file"
        return "$code"
    fi
}

# cht.sh support
function cht () 
{
    local style=native
    if command -v cht.sh > /dev/null ; then
        CHTSH_QUERY_OPTIONS="style=$style" cht.sh $@
    else
        local sp="${*/ //}"
        curl https://cht.sh/"${sp// /+}"\?style=native
    fi
}

### Conversion functions
function bin2oct () { base2base  2  8 "$@" ; }
function bin2dec () { base2base  2 10 "$@" ; }
function bin2hex () { base2base  2 16 "$@" ; }
function oct2bin () { base2base  8  2 "$@" ; }
function oct2dec () { base2base  8 10 "$@" ; }
function oct2hex () { base2base  8 16 "$@" ; }
function dec2bin () { base2base 10  2 "$@" ; }
function dec2hex () { base2base 10 16 "$@" ; }
function dec2oct () { base2base 10  8 "$@" ; }
function hex2bin () { base2base 16  2 "$@" ; }
function hex2dec () { base2base 16 10 "$@" ; }
function hex2oct () { base2base 16  8 "$@" ; }
### Conversion functions
