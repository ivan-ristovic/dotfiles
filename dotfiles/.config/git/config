[alias]
    
    # List all aliases
    alias=!git config -l | grep ^alias | cut -c 7- | sort

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    
    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # View the current working tree status using the short format
    s = status -s
    
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Undo action
    undo = !git reset HEAD~1 --mixed


[apply]

    # Detect whitespace errors when applying a patch
    whitespace = fix

[user]
    email = work@ristovic.net
    name = Ivan Ristovic

[core]
    pager = diff-so-fancy | less --tabs=4 -RFX

[interactive]
    diffFilter = diff-so-fancy --patch

[color]
    ui = true

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[color "diff"]
    meta = 11
    frag = magenta bold
    func = 146 bold
    commit = yellow bold
    old = red bold
    new = green bold
    whitespace = red reverse

[merge]
    tool = nvimdiff

[mergetool]
    prompt = false
    keepBackup = false

[mergetool "nvimdiff"]
    cmd = nvim -c "Gvdiffsplit!" "$MERGED"

[url "git@github.com:ivan-ristovic/"]
    insteadOf = ir:
    insteadOf = ivan-ristovic:

[url "git@ristovic.net:ivan/"]
    insteadOf = me:
    insteadOf = cloud:

[url "git://github.com/"]
    insteadOf = ggithub:
    insteadOf = ggh:

[url "https://github.com/"]
    insteadOf = github:
    insteadOf = gh:

[pull]
    rebase = true ; https://blog.sffc.xyz/post/185195398930/why-you-should-use-git-pull-ff-only

[fetch]
    prune = true ; automatically delete remote tracking branches that have been deleted

[push]
    autoSetupRemote = true ; create remote branch if it doesn't exist yet

[diff]
    colorMoved = true ; moved lines colored different than added/removed
    algorithm = histogram ; https://luppeng.wordpress.com/2020/10/10/when-to-use-each-of-the-git-diff-algorithms/
