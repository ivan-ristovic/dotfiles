#!/usr/bin/env python3
#
# Copyright (C) 2016 James Murphy
# Licensed under the GPL version 2 only
#
# A battery indicator blocklet script for i3blocks

from subprocess import check_output
import re

status = check_output(['acpi'], universal_newlines=True)

if not status:
    # stands for no battery found
    fulltext = "<span color='red'><span font='FontAwesome'>\uf00d \uf240</span></span>".format(color)
    percentleft = 100
else:
    # if there is more than one battery in one laptop, the percentage left is
    # available for each battery separately, although state and remaining
    # time for overall block is shown in the status of the first battery
    batteries = status.split("\n")
    state_batteries=[]
    commasplitstatus_batteries=[]
    percentleft_batteries=[]
    time = ""
    timeleft = ""
    for battery in batteries:
        if battery!='':
            state_batteries.append(battery.split(": ")[1].split(", ")[0])
            commasplitstatus = battery.split(", ")
            if not time:
                time = commasplitstatus[-1].strip()
                # check if it matches a time
                time = re.match(r"(\d+):(\d+)", time)
                if time:
                    time = ":".join(time.groups())
                    timeleft = " ({})".format(time)

            p = int(commasplitstatus[1].rstrip("%\n"))
            if p>0:
                percentleft_batteries.append(p)
            commasplitstatus_batteries.append(commasplitstatus)
    state = state_batteries[0]
    commasplitstatus = commasplitstatus_batteries[0]
    if percentleft_batteries:
        percentleft = int(sum(percentleft_batteries)/len(percentleft_batteries))
    else:
        percentleft = 0

    def color(percent):
        colors = [
            '#FFFFFF', # < 10, exit code will make bg red
            '#d21a1a', # < 20
            '#df612a', # < 30
            '#c98f1f', # < 40
            '#c98f1f', # < 50
            '#94bf19', # < 60
            '#94bf19', # < 70
            '#58ba1a', # < 80
            '#58ba1a', # < 90
            '#58ba1a', # < 100
            '#58ba1a', # 100
        ]
        return colors[int(percent / 10)]

    def battery(percent, state):
        if state == 'Full':
            return '\uf578'
        icons = {
            #                  < 10      < 20      < 30      < 40      < 50      < 60      < 70      < 80      < 90      < 100      100
            'Discharging': [ '\uf579', '\uf57a', '\uf57b', '\uf57c', '\uf57d', '\uf57e', '\uf57f', '\uf580', '\uf581', '\uf578', '\uf578' ],
            'Charging'   : [ '\uf579', '\uf585', '\uf585', '\uf586', '\uf586', '\uf587', '\uf588', '\uf589', '\uf589', '\uf58a', '\uf584' ],
        }
        if state in icons:
            return icons[state][int(percent / 10)]
        else: 
            return '\uf582'

    fulltext = f"<span font='FontAwesome'>{battery(percentleft, state)}</span> "
    form = '<span color="{}">{}%</span>'
    fulltext += form.format(color(percentleft), percentleft)
    fulltext += timeleft

print(fulltext)
print(fulltext)
if percentleft < 10:
    exit(33)
