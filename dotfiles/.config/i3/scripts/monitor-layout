#!/usr/bin/env python

rate_cmp_eps = 2

import os 
import re
import subprocess
import sys
from functools import cmp_to_key

postswitch = '~/.config/autorandr/postswitch'

env_dbg = os.getenv("DEBUG", "false").lower() == "true"
env_rate_pref = float(os.getenv("RATE_PREF", 144))
env_rate_min = float(os.getenv("RATE_MIN", 60))
env_rate_max_p = float(os.getenv("RATE_MAX_PRIMARY", 60))
env_rate_max_s = float(os.getenv("RATE_MAX_SECONDARY", 144))
env_res_pref_primary_max = os.getenv("RES_PREF_PRIMARY_MAX", '1920x1200').split('x')
env_res_pref_secondary_max = os.getenv("RES_PREF_SECONDARY_MAX", '4096x9999').split('x')
env_res_pref_primary_max = list(map(int, env_res_pref_primary_max))
env_res_pref_secondary_max = list(map(int, env_res_pref_secondary_max))

positions = {
    "primary": "primary",
    "secondary": "secondary",
    "left-of": "right-of",
    "right-of": "left-of",
    "above": "below",
    "below": "above",
}
if len(sys.argv) < 2 or sys.argv[1] not in positions:
    print('Expected position as argument, one of: ', list(positions.keys()))
    sys.exit(1)
pos = sys.argv[1]

def msg(*args):
    if env_dbg:
        print(sys.argv[0], '| ', *args)

xrandr_result = subprocess.check_output('xrandr', shell=True, text=True).split(os.linesep)
disconnected_outputs = []
xrandr_outputs = []

def ignore_line(line):
    line = line.strip()
    if not line:
        return True
    skip_keywords = [ 'Screen', 'HSync', 'VSync', 'h:', 'v:', 'clock' ]
    for kw in filter(lambda w: f'{w} ', skip_keywords):
        if kw in line:
            return True
    return False

for line in xrandr_result:
    if ignore_line(line):
        continue
    if line.startswith(' '):  # rate
        xrandr_outputs[-1].append(line)
    else:                     # output
        name = line[:line.index(' ')]
        if ' disconnected ' in line:
            disconnected_outputs.append(name)
        else:
            xrandr_outputs.append([name])

disconnected_outputs = sorted(disconnected_outputs)
msg('Disconnected outputs:', disconnected_outputs)

rate_regex = r'[0-9]+\.[0-9]+'

outputs = {}
for output in xrandr_outputs:
    name = output[0].split()[0]
    resolutions = [] 
    for res in output[1:]:
        res_value = res.split()[0]
        rates = sorted([float(v) for v in re.findall(rate_regex, res)], reverse=True)
        resolutions.append([res_value, rates]) 
    outputs[name] = resolutions

print(outputs)

assert len(outputs) <= 2, 'More than two displays are connected.'

if len(outputs) == 1:
    env_rate_max_p = env_rate_max_s

def xrandr_arg_disconnected(args):
    return ' '.join([f'--output {arg} --off' for arg in args]) 

xrandr_arg_off = xrandr_arg_disconnected(disconnected_outputs)
xrandr_arg_primary = []
xrandr_arg_secondary = []

def push_arg(is_primary, *args):
    if is_primary:
        xrandr_arg_primary.extend([str(arg) for arg in args])
    else:
        xrandr_arg_secondary.extend([str(arg) for arg in args])

output_primary = None
output_second = None
for output, info in outputs.items():
    is_primary = output.startswith('eDP')
    if is_primary:
        output_primary = output
    else:
        output_second = output
    
    if env_dbg:
        msg(output, '\t#1' if is_primary else '\t#2')
        for res in info:
            msg('  ', res[0], '\t', res[1])

    push_arg(is_primary, '--output', output)

    def parse_res(res_str):
        # e.g. 1024x768i 
        return list(map(int, res_str.rstrip('i').split('x')))

    def is_viable_rate(r):
        max_rate = env_rate_max_p if is_primary else env_rate_max_s
        return (r > env_rate_min - rate_cmp_eps) and (r < max_rate + rate_cmp_eps)

    def is_preferred_rate(r):
        return abs(r - env_rate_pref) < rate_cmp_eps

    def is_viable_primary_resolution(r):
        res = parse_res(r)
        return res <= env_res_pref_primary_max

    def is_viable_secondary_resolution(r):
        res = parse_res(r)
        return res <= env_res_pref_secondary_max

    def contains_preferred_rate(res_info):
        viable = filter(is_viable_rate, res_info[1])
        return any(filter(is_preferred_rate , viable))
    
    def contains_viable_rate(res_info):
        return any(filter(is_viable_rate, res_info[1]))

    def primary_resolution_filter(res_info):
        return is_viable_primary_resolution(res_info[0]) and contains_viable_rate(res_info)
    
    def secondary_resolution_filter(res_info):
        return is_viable_secondary_resolution(res_info[0]) and contains_viable_rate(res_info)

    def cmp_res(r1, r2):
        res1, rate1 = parse_res(r1[0]), max(r1[1])
        res2, rate2 = parse_res(r2[0]), max(r2[1])
        if is_viable_rate(rate1) and is_viable_rate(rate2):
            if res1 > res2:
                return 1
            elif res2 > res1:
                return -1
            else:
                if abs(rate1 - rate2) < rate_cmp_eps:
                    return 1 if res1 > res2 else (-1 if res1 < res2 else 0)
                else:
                    return 1 if rate1 > rate2 else -1
        elif is_viable_rate(rate1):
            return 1
        elif is_viable_rate(rate2):
            return -1
        else:
            return 0

    viable_resolutions = list(filter(primary_resolution_filter if is_primary else secondary_resolution_filter, info))
    preferred_resolutions = list(filter(contains_preferred_rate, info))
    if env_dbg:
        msg('viable resolutions: ', *viable_resolutions)
        msg('preferred resolutions: ', *preferred_resolutions)

    chosen_set = preferred_resolutions if any(preferred_resolutions) else viable_resolutions
    chosen_set = sorted(chosen_set, key=cmp_to_key(cmp_res), reverse=True)
    if any(chosen_set):
        best_res = chosen_set[0][0]
        best_rate = max(filter(is_viable_rate, chosen_set[0][1]))
        push_arg(is_primary, '--mode', best_res, '--rate', best_rate)
    push_arg(is_primary, '--rotate normal')

assert output_primary is not None

if pos not in ['primary', 'secondary']:
    xrandr_cmd = f'''\
    xrandr \
    {xrandr_arg_off} \
    {' '.join(xrandr_arg_primary)} \
    {' '.join(xrandr_arg_secondary)} --primary --{pos} {output_primary}
    '''
else:
    if len(outputs) == 1:
        xrandr_cmd = f"xrandr {xrandr_arg_off} {' '.join(xrandr_arg_primary)} --primary"
    else:
        assert output_second is not None
        if pos == 'primary':
            xrandr_cmd = f"xrandr {xrandr_arg_off} {' '.join(xrandr_arg_primary)} --primary --output {output_second} --off"
        else:
            xrandr_cmd = f"xrandr {xrandr_arg_off} --output {output_primary} --off {' '.join(xrandr_arg_secondary)} --primary"

msg('executing: ' + xrandr_cmd)
if not env_dbg:
    os.system(xrandr_cmd)
    os.system(f"{postswitch} {pos}")

