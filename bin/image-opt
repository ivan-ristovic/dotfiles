#!/bin/bash

function usage ()
{
    echo -e "usage: $(basename $0) image|directory output_dir [options]"
    echo -e "options:"
    echo -e "    --no-strip | -S            (do not strip exif metadata)"
    echo -e "    (--quality | -q) [0..100]  (e.g., '-q 85' for visually lossless)"
    echo -e "    --error | -e               (halt on magick error)"
    exit 2
}

SHORT_OPTS=h,S:,q:,e
LONG_OPTS=help,no-strip:,quality:,error
OPTS=$(getopt --alternative --name 'argument error' --options $SHORT_OPTS --longoptions $LONG_OPTS -- "$@") 
if [ $? -ne 0 ]; then
    std::fat "failed to parse provided arguments"
fi
eval set -- $OPTS

STRICT=false
STRIP="-strip"
QUALITY="85%"

while :
do
    case "$1" in
        -e | --error)
            STRICT=true
            ;;
        -S | --no-strip)
            STRIP=""
            shift
            ;;
        -q | --quality)
            QUALITY="$2%"
            shift
            ;;
        -h | --help)
            usage
            ;;
        --)
            shift;
            break
            ;;
        *)
            usage "unknown option: $1"
            ;;
    esac
    shift;
done

if [ $# -ne 2 ]; then
    usage
fi

errored_entries=()

function process ()
{
    in="$1"
    out="$2/$in"
    mkdir -p "$(dirname "$out")"
    echo "$in -> $out"

    magick \
        "$in" \
        $STRIP \
        -interlace Plane \
        -sampling-factor 4:2:0 \
        -define jpeg:dct-method=float \
        -quality $QUALITY \
        "$out"
    if [ $? -ne 0 ] ; then
        if $STRICT ; then
            exit $?
        fi
        errored_entries+=("$in")
        echo "error: $in"
    fi
}

if [ -d "$1" ]; then
    find "$1" -type f -print0 | 
    while IFS= read -r -d '' f; do 
        process "$f" "$2"
    done
else
    process "$1" "$2"
fi

echo " --- errors ---"
for errored_entry in "${errored_entries[@]}"; do
    echo "$errored_entry"
done

